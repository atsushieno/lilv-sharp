// This source file is generated by nclang PInvokeGenerator.
using System;
using System.Runtime.InteropServices;
using time_t = System.IntPtr;
using size_t = System.IntPtr;
using LV2_Handle = System.IntPtr;
using delegate5 = Lv2Sharp.NativeInterop.Delegates.LV2_Descriptor_Function; // lv2.h (394,3)
using LV2_Lib_Handle = System.IntPtr;
using delegate8 = Lv2Sharp.NativeInterop.Delegates.LV2_Lib_Descriptor_Function; // lv2.h (463,3)
using LV2_Dyn_Manifest_Handle = System.IntPtr;
using LV2_URID_Map_Handle = System.IntPtr;
using LV2_URID_Unmap_Handle = System.IntPtr;
using LV2_Atom_Forge_Sink_Handle = System.IntPtr;
using LV2_Atom_Forge_Ref = System.IntPtr;
using delegate11 = Lv2Sharp.NativeInterop.Delegates.LV2_Atom_Forge_Sink; // forge.h (86,3)
using delegate12 = Lv2Sharp.NativeInterop.Delegates.LV2_Atom_Forge_Deref_Func; // forge.h (92,3)
using LV2_Worker_Respond_Handle = System.IntPtr;
using delegate13 = Lv2Sharp.NativeInterop.Delegates.LV2_Worker_Respond_Function; // worker.h (62,29)
using LV2_Worker_Schedule_Handle = System.IntPtr;
using LV2_Resize_Port_Feature_Data = System.IntPtr;
using LV2_Log_Handle = System.IntPtr;
using LV2_State_Handle = System.IntPtr;
using LV2_State_Map_Path_Handle = System.IntPtr;
using LV2_State_Make_Path_Handle = System.IntPtr;
using delegate20 = Lv2Sharp.NativeInterop.Delegates.LV2_State_Store_Function; // state.h (144,28)
using delegate21 = Lv2Sharp.NativeInterop.Delegates.LV2_State_Retrieve_Function; // state.h (170,23)
using LV2_Event_Callback_Data = System.IntPtr;
using LV2_URI_Map_Callback_Data = System.IntPtr;
using LV2UI_Widget = System.IntPtr;
using LV2UI_Handle = System.IntPtr;
using LV2UI_Controller = System.IntPtr;
using LV2UI_Feature_Handle = System.IntPtr;
using delegate30 = Lv2Sharp.NativeInterop.Delegates.LV2UI_Write_Function; // ui.h (125,16)
using delegate39 = Lv2Sharp.NativeInterop.Delegates.LV2UI_DescriptorFunction; // ui.h (436,35)
using delegate0 = Lv2Sharp.NativeInterop.Delegates.delegate0;
using delegate1 = Lv2Sharp.NativeInterop.Delegates.delegate1;
using delegate2 = Lv2Sharp.NativeInterop.Delegates.delegate2;
using delegate3 = Lv2Sharp.NativeInterop.Delegates.delegate3;
using delegate4 = Lv2Sharp.NativeInterop.Delegates.delegate4;
using LV2_Descriptor_Function = Lv2Sharp.NativeInterop.Delegates.LV2_Descriptor_Function;
using delegate6 = Lv2Sharp.NativeInterop.Delegates.delegate6;
using delegate7 = Lv2Sharp.NativeInterop.Delegates.delegate7;
using LV2_Lib_Descriptor_Function = Lv2Sharp.NativeInterop.Delegates.LV2_Lib_Descriptor_Function;
using delegate9 = Lv2Sharp.NativeInterop.Delegates.delegate9;
using delegate10 = Lv2Sharp.NativeInterop.Delegates.delegate10;
using LV2_Atom_Forge_Sink = Lv2Sharp.NativeInterop.Delegates.LV2_Atom_Forge_Sink;
using LV2_Atom_Forge_Deref_Func = Lv2Sharp.NativeInterop.Delegates.LV2_Atom_Forge_Deref_Func;
using LV2_Worker_Respond_Function = Lv2Sharp.NativeInterop.Delegates.LV2_Worker_Respond_Function;
using delegate14 = Lv2Sharp.NativeInterop.Delegates.delegate14;
using delegate15 = Lv2Sharp.NativeInterop.Delegates.delegate15;
using delegate16 = Lv2Sharp.NativeInterop.Delegates.delegate16;
using delegate17 = Lv2Sharp.NativeInterop.Delegates.delegate17;
using delegate18 = Lv2Sharp.NativeInterop.Delegates.delegate18;
using delegate19 = Lv2Sharp.NativeInterop.Delegates.delegate19;
using LV2_State_Store_Function = Lv2Sharp.NativeInterop.Delegates.LV2_State_Store_Function;
using LV2_State_Retrieve_Function = Lv2Sharp.NativeInterop.Delegates.LV2_State_Retrieve_Function;
using delegate22 = Lv2Sharp.NativeInterop.Delegates.delegate22;
using delegate23 = Lv2Sharp.NativeInterop.Delegates.delegate23;
using delegate24 = Lv2Sharp.NativeInterop.Delegates.delegate24;
using delegate25 = Lv2Sharp.NativeInterop.Delegates.delegate25;
using delegate26 = Lv2Sharp.NativeInterop.Delegates.delegate26;
using delegate27 = Lv2Sharp.NativeInterop.Delegates.delegate27;
using delegate28 = Lv2Sharp.NativeInterop.Delegates.delegate28;
using delegate29 = Lv2Sharp.NativeInterop.Delegates.delegate29;
using LV2UI_Write_Function = Lv2Sharp.NativeInterop.Delegates.LV2UI_Write_Function;
using delegate31 = Lv2Sharp.NativeInterop.Delegates.delegate31;
using delegate32 = Lv2Sharp.NativeInterop.Delegates.delegate32;
using delegate33 = Lv2Sharp.NativeInterop.Delegates.delegate33;
using delegate34 = Lv2Sharp.NativeInterop.Delegates.delegate34;
using delegate35 = Lv2Sharp.NativeInterop.Delegates.delegate35;
using delegate36 = Lv2Sharp.NativeInterop.Delegates.delegate36;
using delegate37 = Lv2Sharp.NativeInterop.Delegates.delegate37;
using delegate38 = Lv2Sharp.NativeInterop.Delegates.delegate38;
using LV2UI_DescriptorFunction = Lv2Sharp.NativeInterop.Delegates.LV2UI_DescriptorFunction;

namespace Lv2Sharp.NativeInterop {
[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Feature // lv2.h (143, 16)
{
	[CTypeDetails ("Pointer<byte>")]internal System.IntPtr @URI;
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Descriptor // lv2.h (166, 16)
{
	[CTypeDetails ("Pointer<byte>")]internal System.IntPtr @URI;
	[CTypeDetails ("Pointer<LV2_Handle (const _LV2_Descriptor *, double, const char *, const LV2_Feature *const *)>")]internal Delegates.delegate0 @instantiate;
	[CTypeDetails ("Pointer<void (LV2_Handle, unsigned int, void *)>")]internal Delegates.delegate1 @connect_port;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @activate;
	[CTypeDetails ("Pointer<void (LV2_Handle, unsigned int)>")]internal Delegates.delegate3 @run;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @deactivate;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @cleanup;
	[CTypeDetails ("Pointer<const void *(const char *)>")]internal Delegates.delegate4 @extension_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Lib_Descriptor // lv2.h (407, 9)
{
	internal LV2_Lib_Handle @handle;
	internal uint @size;
	[CTypeDetails ("Pointer<void (LV2_Lib_Handle)>")]internal Delegates.delegate6 @cleanup;
	[CTypeDetails ("Pointer<const LV2_Descriptor *(LV2_Lib_Handle, unsigned int)>")]internal Delegates.delegate7 @get_plugin;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_URID_Map // urid.h (63, 16)
{
	internal LV2_URID_Map_Handle @handle;
	[CTypeDetails ("Pointer<unsigned int (LV2_URID_Map_Handle, const char *)>")]internal Delegates.delegate9 @map;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_URID_Unmap // urid.h (100, 16)
{
	internal LV2_URID_Unmap_Handle @handle;
	[CTypeDetails ("Pointer<const char *(LV2_URID_Unmap_Handle, unsigned int)>")]internal Delegates.delegate10 @unmap;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom // atom.h (106, 9)
{
	internal uint @size;
	internal uint @type;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Bool // atom.h (112, 9)
{
	internal LV2_Atom @atom;
	internal int @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Long // atom.h (118, 9)
{
	internal LV2_Atom @atom;
	internal long @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Float // atom.h (124, 9)
{
	internal LV2_Atom @atom;
	internal float @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Double // atom.h (130, 9)
{
	internal LV2_Atom @atom;
	internal double @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_URID // atom.h (139, 9)
{
	internal LV2_Atom @atom;
	internal uint @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_String // atom.h (145, 9)
{
	internal LV2_Atom @atom;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Literal_Body // atom.h (151, 9)
{
	internal uint @datatype;
	internal uint @lang;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Literal // atom.h (158, 9)
{
	internal LV2_Atom @atom;
	internal LV2_Atom_Literal_Body @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Tuple // atom.h (164, 9)
{
	internal LV2_Atom @atom;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Vector_Body // atom.h (170, 9)
{
	internal uint @child_size;
	internal uint @child_type;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Vector // atom.h (177, 9)
{
	internal LV2_Atom @atom;
	internal LV2_Atom_Vector_Body @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Property_Body // atom.h (183, 9)
{
	internal uint @key;
	internal uint @context;
	internal LV2_Atom @value;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Property // atom.h (191, 9)
{
	internal LV2_Atom @atom;
	internal LV2_Atom_Property_Body @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Object_Body // atom.h (197, 9)
{
	internal uint @id;
	internal uint @otype;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Object // atom.h (204, 9)
{
	internal LV2_Atom @atom;
	internal LV2_Atom_Object_Body @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Event // atom.h (210, 9)
{
	internal anonymous_type_19 @time;
	internal LV2_Atom @body;
}

[StructLayout (LayoutKind.Explicit)]
internal struct anonymous_type_19 // atom.h (212, 2)
{
	[FieldOffset (0)]
	internal long @frames;
	[FieldOffset (0)]
	internal double @beats;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Sequence_Body // atom.h (236, 9)
{
	internal uint @unit;
	internal uint @pad;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Sequence // atom.h (243, 9)
{
	internal LV2_Atom @atom;
	internal LV2_Atom_Sequence_Body @body;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Object_Query // util.h (296, 9)
{
	internal uint @key;
	[CTypeDetails ("Pointer<System.IntPtr>")]internal System.IntPtr @value;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Forge_Frame // forge.h (96, 16)
{
	[CTypeDetails ("Pointer<_LV2_Atom_Forge_Frame>")]internal System.IntPtr @parent;
	internal LV2_Atom_Forge_Ref @ref;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Atom_Forge // forge.h (102, 9)
{
	[CTypeDetails ("Pointer<uint8_t>")]internal System.IntPtr @buf;
	internal uint @offset;
	internal uint @size;
	internal LV2_Atom_Forge_Sink @sink;
	internal LV2_Atom_Forge_Deref_Func @deref;
	internal LV2_Atom_Forge_Sink_Handle @handle;
	[CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]internal System.IntPtr @stack;
	internal uint @Blank;
	internal uint @Bool;
	internal uint @Chunk;
	internal uint @Double;
	internal uint @Float;
	internal uint @Int;
	internal uint @Long;
	internal uint @Literal;
	internal uint @Object;
	internal uint @Path;
	internal uint @Property;
	internal uint @Resource;
	internal uint @Sequence;
	internal uint @String;
	internal uint @Tuple;
	internal uint @URI;
	internal uint @URID;
	internal uint @Vector;
}

internal enum LV2_Worker_Status // worker.h (46, 9)
{
	LV2_WORKER_SUCCESS  = 0,
	LV2_WORKER_ERR_UNKNOWN  = 1,
	LV2_WORKER_ERR_NO_SPACE  = 2,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Worker_Interface // worker.h (74, 16)
{
	[CTypeDetails ("Pointer<LV2_Worker_Status (LV2_Handle, LV2_Worker_Respond_Function, LV2_Worker_Respond_Handle, unsigned int, const void *)>")]internal Delegates.delegate14 @work;
	[CTypeDetails ("Pointer<LV2_Worker_Status (LV2_Handle, unsigned int, const void *)>")]internal Delegates.delegate15 @work_response;
	[CTypeDetails ("Pointer<LV2_Worker_Status (LV2_Handle)>")]internal Delegates.delegate16 @end_run;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Worker_Schedule // worker.h (132, 16)
{
	internal LV2_Worker_Schedule_Handle @handle;
	[CTypeDetails ("Pointer<LV2_Worker_Status (LV2_Worker_Schedule_Handle, unsigned int, const void *)>")]internal Delegates.delegate17 @schedule_work;
}

internal enum LV2_Resize_Port_Status // resize-port.h (45, 9)
{
	LV2_RESIZE_PORT_SUCCESS  = 0,
	LV2_RESIZE_PORT_ERR_UNKNOWN  = 1,
	LV2_RESIZE_PORT_ERR_NO_SPACE  = 2,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Resize_Port_Resize // resize-port.h (55, 9)
{
	internal LV2_Resize_Port_Feature_Data @data;
	[CTypeDetails ("Pointer<LV2_Resize_Port_Status (LV2_Resize_Port_Feature_Data, unsigned int, void *)>")]internal Delegates.delegate18 @resize;
}

internal enum LV2_Midi_Message_Type // midi.h (90, 9)
{
	LV2_MIDI_MSG_INVALID  = 0,
	LV2_MIDI_MSG_NOTE_OFF  = 128,
	LV2_MIDI_MSG_NOTE_ON  = 144,
	LV2_MIDI_MSG_NOTE_PRESSURE  = 160,
	LV2_MIDI_MSG_CONTROLLER  = 176,
	LV2_MIDI_MSG_PGM_CHANGE  = 192,
	LV2_MIDI_MSG_CHANNEL_PRESSURE  = 208,
	LV2_MIDI_MSG_BENDER  = 224,
	LV2_MIDI_MSG_SYSTEM_EXCLUSIVE  = 240,
	LV2_MIDI_MSG_MTC_QUARTER  = 241,
	LV2_MIDI_MSG_SONG_POS  = 242,
	LV2_MIDI_MSG_SONG_SELECT  = 243,
	LV2_MIDI_MSG_TUNE_REQUEST  = 246,
	LV2_MIDI_MSG_CLOCK  = 248,
	LV2_MIDI_MSG_START  = 250,
	LV2_MIDI_MSG_CONTINUE  = 251,
	LV2_MIDI_MSG_STOP  = 252,
	LV2_MIDI_MSG_ACTIVE_SENSE  = 254,
	LV2_MIDI_MSG_RESET  = 255,
}

internal enum LV2_Midi_Controller // midi.h (115, 9)
{
	LV2_MIDI_CTL_MSB_BANK  = 0,
	LV2_MIDI_CTL_MSB_MODWHEEL  = 1,
	LV2_MIDI_CTL_MSB_BREATH  = 2,
	LV2_MIDI_CTL_MSB_FOOT  = 4,
	LV2_MIDI_CTL_MSB_PORTAMENTO_TIME  = 5,
	LV2_MIDI_CTL_MSB_DATA_ENTRY  = 6,
	LV2_MIDI_CTL_MSB_MAIN_VOLUME  = 7,
	LV2_MIDI_CTL_MSB_BALANCE  = 8,
	LV2_MIDI_CTL_MSB_PAN  = 10,
	LV2_MIDI_CTL_MSB_EXPRESSION  = 11,
	LV2_MIDI_CTL_MSB_EFFECT1  = 12,
	LV2_MIDI_CTL_MSB_EFFECT2  = 13,
	LV2_MIDI_CTL_MSB_GENERAL_PURPOSE1  = 16,
	LV2_MIDI_CTL_MSB_GENERAL_PURPOSE2  = 17,
	LV2_MIDI_CTL_MSB_GENERAL_PURPOSE3  = 18,
	LV2_MIDI_CTL_MSB_GENERAL_PURPOSE4  = 19,
	LV2_MIDI_CTL_LSB_BANK  = 32,
	LV2_MIDI_CTL_LSB_MODWHEEL  = 33,
	LV2_MIDI_CTL_LSB_BREATH  = 34,
	LV2_MIDI_CTL_LSB_FOOT  = 36,
	LV2_MIDI_CTL_LSB_PORTAMENTO_TIME  = 37,
	LV2_MIDI_CTL_LSB_DATA_ENTRY  = 38,
	LV2_MIDI_CTL_LSB_MAIN_VOLUME  = 39,
	LV2_MIDI_CTL_LSB_BALANCE  = 40,
	LV2_MIDI_CTL_LSB_PAN  = 42,
	LV2_MIDI_CTL_LSB_EXPRESSION  = 43,
	LV2_MIDI_CTL_LSB_EFFECT1  = 44,
	LV2_MIDI_CTL_LSB_EFFECT2  = 45,
	LV2_MIDI_CTL_LSB_GENERAL_PURPOSE1  = 48,
	LV2_MIDI_CTL_LSB_GENERAL_PURPOSE2  = 49,
	LV2_MIDI_CTL_LSB_GENERAL_PURPOSE3  = 50,
	LV2_MIDI_CTL_LSB_GENERAL_PURPOSE4  = 51,
	LV2_MIDI_CTL_SUSTAIN  = 64,
	LV2_MIDI_CTL_PORTAMENTO  = 65,
	LV2_MIDI_CTL_SOSTENUTO  = 66,
	LV2_MIDI_CTL_SOFT_PEDAL  = 67,
	LV2_MIDI_CTL_LEGATO_FOOTSWITCH  = 68,
	LV2_MIDI_CTL_HOLD2  = 69,
	LV2_MIDI_CTL_SC1_SOUND_VARIATION  = 70,
	LV2_MIDI_CTL_SC2_TIMBRE  = 71,
	LV2_MIDI_CTL_SC3_RELEASE_TIME  = 72,
	LV2_MIDI_CTL_SC4_ATTACK_TIME  = 73,
	LV2_MIDI_CTL_SC5_BRIGHTNESS  = 74,
	LV2_MIDI_CTL_SC6  = 75,
	LV2_MIDI_CTL_SC7  = 76,
	LV2_MIDI_CTL_SC8  = 77,
	LV2_MIDI_CTL_SC9  = 78,
	LV2_MIDI_CTL_SC10  = 79,
	LV2_MIDI_CTL_GENERAL_PURPOSE5  = 80,
	LV2_MIDI_CTL_GENERAL_PURPOSE6  = 81,
	LV2_MIDI_CTL_GENERAL_PURPOSE7  = 82,
	LV2_MIDI_CTL_GENERAL_PURPOSE8  = 83,
	LV2_MIDI_CTL_PORTAMENTO_CONTROL  = 84,
	LV2_MIDI_CTL_E1_REVERB_DEPTH  = 91,
	LV2_MIDI_CTL_E2_TREMOLO_DEPTH  = 92,
	LV2_MIDI_CTL_E3_CHORUS_DEPTH  = 93,
	LV2_MIDI_CTL_E4_DETUNE_DEPTH  = 94,
	LV2_MIDI_CTL_E5_PHASER_DEPTH  = 95,
	LV2_MIDI_CTL_DATA_INCREMENT  = 96,
	LV2_MIDI_CTL_DATA_DECREMENT  = 97,
	LV2_MIDI_CTL_NRPN_LSB  = 98,
	LV2_MIDI_CTL_NRPN_MSB  = 99,
	LV2_MIDI_CTL_RPN_LSB  = 100,
	LV2_MIDI_CTL_RPN_MSB  = 101,
	LV2_MIDI_CTL_ALL_SOUNDS_OFF  = 120,
	LV2_MIDI_CTL_RESET_CONTROLLERS  = 121,
	LV2_MIDI_CTL_LOCAL_CONTROL_SWITCH  = 122,
	LV2_MIDI_CTL_ALL_NOTES_OFF  = 123,
	LV2_MIDI_CTL_OMNI_OFF  = 124,
	LV2_MIDI_CTL_OMNI_ON  = 125,
	LV2_MIDI_CTL_MONO1  = 126,
	LV2_MIDI_CTL_MONO2  = 127,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Log_Log // log.h (64, 16)
{
	internal LV2_Log_Handle @handle;
	[CTypeDetails ("Pointer<int (LV2_Log_Handle, unsigned int, const char *, ...)>")]internal Delegates.delegate19 @printf;
	[CTypeDetails ("Pointer<int (LV2_Log_Handle, unsigned int, const char *, __va_list_tag *)>")]internal System.IntPtr @vprintf;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Log_Logger // logger.h (43, 9)
{
	[CTypeDetails ("Pointer<LV2_Log_Log>")]internal System.IntPtr @log;
	internal uint @Error;
	internal uint @Note;
	internal uint @Trace;
	internal uint @Warning;
}

internal enum LV2_State_Flags // state.h (62, 9)
{
	LV2_STATE_IS_POD  = 1,
	LV2_STATE_IS_PORTABLE  = 2,
	LV2_STATE_IS_NATIVE  = 4,
}

internal enum LV2_State_Status // state.h (101, 9)
{
	LV2_STATE_SUCCESS  = 0,
	LV2_STATE_ERR_UNKNOWN  = 1,
	LV2_STATE_ERR_BAD_TYPE  = 2,
	LV2_STATE_ERR_BAD_FLAGS  = 3,
	LV2_STATE_ERR_NO_FEATURE  = 4,
	LV2_STATE_ERR_NO_PROPERTY  = 5,
	LV2_STATE_ERR_NO_SPACE  = 6,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_State_Interface // state.h (195, 16)
{
	[CTypeDetails ("Pointer<LV2_State_Status (LV2_Handle, LV2_State_Store_Function, LV2_State_Handle, unsigned int, const LV2_Feature *const *)>")]internal Delegates.delegate22 @save;
	[CTypeDetails ("Pointer<LV2_State_Status (LV2_Handle, LV2_State_Retrieve_Function, LV2_State_Handle, unsigned int, const LV2_Feature *const *)>")]internal Delegates.delegate23 @restore;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_State_Map_Path // state.h (273, 9)
{
	internal LV2_State_Map_Path_Handle @handle;
	[CTypeDetails ("Pointer<char *(LV2_State_Map_Path_Handle, const char *)>")]internal Delegates.delegate24 @abstract_path;
	[CTypeDetails ("Pointer<char *(LV2_State_Map_Path_Handle, const char *)>")]internal Delegates.delegate24 @absolute_path;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_State_Make_Path // state.h (321, 9)
{
	internal LV2_State_Make_Path_Handle @handle;
	[CTypeDetails ("Pointer<char *(LV2_State_Make_Path_Handle, const char *)>")]internal Delegates.delegate25 @path;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Extension_Data_Feature // data-access.h (44, 9)
{
	[CTypeDetails ("Pointer<const void *(const char *)>")]internal Delegates.delegate4 @data_access;
}

internal enum LV2_Options_Context // options.h (50, 9)
{
	LV2_OPTIONS_INSTANCE  = 0,
	LV2_OPTIONS_RESOURCE  = 1,
	LV2_OPTIONS_BLANK  = 2,
	LV2_OPTIONS_PORT  = 3,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Options_Option // options.h (88, 16)
{
	internal LV2_Options_Context @context;
	internal uint @subject;
	internal uint @key;
	internal uint @size;
	internal uint @type;
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @value;
}

internal enum LV2_Options_Status // options.h (98, 9)
{
	LV2_OPTIONS_SUCCESS  = 0,
	LV2_OPTIONS_ERR_UNKNOWN  = 1,
	LV2_OPTIONS_ERR_BAD_SUBJECT  = 2,
	LV2_OPTIONS_ERR_BAD_KEY  = 4,
	LV2_OPTIONS_ERR_BAD_VALUE  = 8,
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Options_Interface // options.h (109, 16)
{
	[CTypeDetails ("Pointer<unsigned int (LV2_Handle, LV2_Options_Option *)>")]internal Delegates.delegate26 @get;
	[CTypeDetails ("Pointer<unsigned int (LV2_Handle, const LV2_Options_Option *)>")]internal Delegates.delegate27 @set;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Event // event.h (72, 9)
{
	internal uint @frames;
	internal uint @subframes;
	internal ushort @type;
	internal ushort @size;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Event_Buffer // event.h (132, 9)
{
	[CTypeDetails ("Pointer<uint8_t>")]internal System.IntPtr @data;
	internal ushort @header_size;
	internal ushort @stamp_type;
	internal uint @event_count;
	internal uint @capacity;
	internal uint @size;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Event_Feature // event.h (226, 9)
{
	internal LV2_Event_Callback_Data @callback_data;
	[CTypeDetails ("Pointer<unsigned int (LV2_Event_Callback_Data, LV2_Event *)>")]internal Delegates.delegate28 @lv2_event_ref;
	[CTypeDetails ("Pointer<unsigned int (LV2_Event_Callback_Data, LV2_Event *)>")]internal Delegates.delegate28 @lv2_event_unref;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Event_Iterator // event-helpers.h (93, 9)
{
	[CTypeDetails ("Pointer<LV2_Event_Buffer>")]internal System.IntPtr @buf;
	internal uint @offset;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_URI_Map_Feature // uri-map.h (57, 9)
{
	internal LV2_URI_Map_Callback_Data @callback_data;
	[CTypeDetails ("Pointer<unsigned int (LV2_URI_Map_Callback_Data, const char *, const char *)>")]internal Delegates.delegate29 @uri_to_id;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Descriptor // ui.h (137, 16)
{
	[CTypeDetails ("Pointer<byte>")]internal System.IntPtr @URI;
	[CTypeDetails ("Pointer<LV2UI_Handle (const _LV2UI_Descriptor *, const char *, const char *, LV2UI_Write_Function, LV2UI_Controller, LV2UI_Widget *, const LV2_Feature *const *)>")]internal Delegates.delegate31 @instantiate;
	[CTypeDetails ("Pointer<void (LV2UI_Handle)>")]internal Delegates.delegate32 @cleanup;
	[CTypeDetails ("Pointer<void (LV2UI_Handle, unsigned int, unsigned int, unsigned int, const void *)>")]internal Delegates.delegate33 @port_event;
	[CTypeDetails ("Pointer<const void *(const char *)>")]internal Delegates.delegate4 @extension_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Resize // ui.h (227, 16)
{
	internal LV2UI_Feature_Handle @handle;
	[CTypeDetails ("Pointer<int (LV2UI_Feature_Handle, int, int)>")]internal Delegates.delegate34 @ui_resize;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Port_Map // ui.h (255, 16)
{
	internal LV2UI_Feature_Handle @handle;
	[CTypeDetails ("Pointer<unsigned int (LV2UI_Feature_Handle, const char *)>")]internal Delegates.delegate35 @port_index;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Port_Subscribe // ui.h (273, 16)
{
	internal LV2UI_Feature_Handle @handle;
	[CTypeDetails ("Pointer<unsigned int (LV2UI_Feature_Handle, unsigned int, unsigned int, const LV2_Feature *const *)>")]internal Delegates.delegate36 @subscribe;
	[CTypeDetails ("Pointer<unsigned int (LV2UI_Feature_Handle, unsigned int, unsigned int, const LV2_Feature *const *)>")]internal Delegates.delegate36 @unsubscribe;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Touch // ui.h (324, 16)
{
	internal LV2UI_Feature_Handle @handle;
	[CTypeDetails ("Pointer<void (LV2UI_Feature_Handle, unsigned int, bool)>")]internal Delegates.delegate37 @touch;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Idle_Interface // ui.h (352, 16)
{
	[CTypeDetails ("Pointer<int (LV2UI_Handle)>")]internal Delegates.delegate38 @idle;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Show_Interface // ui.h (381, 16)
{
	[CTypeDetails ("Pointer<int (LV2UI_Handle)>")]internal Delegates.delegate38 @show;
	[CTypeDetails ("Pointer<int (LV2UI_Handle)>")]internal Delegates.delegate38 @hide;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2UI_Peak_Data // ui.h (404, 16)
{
	internal uint @period_start;
	internal uint @period_size;
	internal float @peak;
}

internal partial class Natives
{
	const string LibraryName = "lv2";
	// function lv2_descriptor - lv2.h (388, 24)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_descriptor (uint @index);

	// function lv2_lib_descriptor - lv2.h (456, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_lib_descriptor ([CTypeDetails ("Pointer<byte>")]System.IntPtr @bundle_path, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lv2_dyn_manifest_open - dynmanifest.h (67, 5)
	[DllImport (LibraryName)]
	internal static extern int lv2_dyn_manifest_open ([CTypeDetails ("Pointer<LV2_Dyn_Manifest_Handle>")]System.IntPtr @handle, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lv2_dyn_manifest_get_subjects - dynmanifest.h (93, 5)
	[DllImport (LibraryName)]
	internal static extern int lv2_dyn_manifest_get_subjects (LV2_Dyn_Manifest_Handle @handle, [CTypeDetails ("Pointer<FILE>")]System.IntPtr @fp);

	// function lv2_dyn_manifest_get_data - dynmanifest.h (126, 5)
	[DllImport (LibraryName)]
	internal static extern int lv2_dyn_manifest_get_data (LV2_Dyn_Manifest_Handle @handle, [CTypeDetails ("Pointer<FILE>")]System.IntPtr @fp, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri);

	// function lv2_dyn_manifest_close - dynmanifest.h (141, 6)
	[DllImport (LibraryName)]
	internal static extern void lv2_dyn_manifest_close (LV2_Dyn_Manifest_Handle @handle);

	// function lv2_atom_pad_size - util.h (48, 1)
	[DllImport (LibraryName)]
	internal static extern uint lv2_atom_pad_size (uint @size);

	// function lv2_atom_total_size - util.h (55, 1)
	[DllImport (LibraryName)]
	internal static extern uint lv2_atom_total_size ([CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @atom);

	// function lv2_atom_is_null - util.h (62, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_is_null ([CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @atom);

	// function lv2_atom_equals - util.h (69, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_equals ([CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @a, [CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @b);

	// function lv2_atom_sequence_begin - util.h (83, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_sequence_begin ([CTypeDetails ("Pointer<LV2_Atom_Sequence_Body>")]System.IntPtr @body);

	// function lv2_atom_sequence_end - util.h (90, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_sequence_end ([CTypeDetails ("Pointer<LV2_Atom_Sequence_Body>")]System.IntPtr @body, uint @size);

	// function lv2_atom_sequence_is_end - util.h (97, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_sequence_is_end ([CTypeDetails ("Pointer<LV2_Atom_Sequence_Body>")]System.IntPtr @body, uint @size, [CTypeDetails ("Pointer<LV2_Atom_Event>")]System.IntPtr @i);

	// function lv2_atom_sequence_next - util.h (106, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_sequence_next ([CTypeDetails ("Pointer<LV2_Atom_Event>")]System.IntPtr @i);

	// function lv2_atom_sequence_clear - util.h (148, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_sequence_clear ([CTypeDetails ("Pointer<LV2_Atom_Sequence>")]System.IntPtr @seq);

	// function lv2_atom_sequence_append_event - util.h (165, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_sequence_append_event ([CTypeDetails ("Pointer<LV2_Atom_Sequence>")]System.IntPtr @seq, uint @capacity, [CTypeDetails ("Pointer<LV2_Atom_Event>")]System.IntPtr @event);

	// function lv2_atom_tuple_begin - util.h (190, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_tuple_begin ([CTypeDetails ("Pointer<LV2_Atom_Tuple>")]System.IntPtr @tup);

	// function lv2_atom_tuple_is_end - util.h (197, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_tuple_is_end ([CTypeDetails ("Pointer<void>")]System.IntPtr @body, uint @size, [CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @i);

	// function lv2_atom_tuple_next - util.h (204, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_tuple_next ([CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @i);

	// function lv2_atom_object_begin - util.h (241, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_object_begin ([CTypeDetails ("Pointer<LV2_Atom_Object_Body>")]System.IntPtr @body);

	// function lv2_atom_object_is_end - util.h (248, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_object_is_end ([CTypeDetails ("Pointer<LV2_Atom_Object_Body>")]System.IntPtr @body, uint @size, [CTypeDetails ("Pointer<LV2_Atom_Property_Body>")]System.IntPtr @i);

	// function lv2_atom_object_next - util.h (257, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_object_next ([CTypeDetails ("Pointer<LV2_Atom_Property_Body>")]System.IntPtr @i);

	// function lv2_atom_object_query - util.h (329, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_atom_object_query ([CTypeDetails ("Pointer<LV2_Atom_Object>")]System.IntPtr @object, [CTypeDetails ("Pointer<LV2_Atom_Object_Query>")]System.IntPtr @query);

	// function lv2_atom_object_body_get - util.h (358, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_atom_object_body_get (uint @size, [CTypeDetails ("Pointer<LV2_Atom_Object_Body>")]System.IntPtr @body);

	// function lv2_atom_object_get - util.h (411, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_atom_object_get ([CTypeDetails ("Pointer<LV2_Atom_Object>")]System.IntPtr @object);

	// function lv2_atom_forge_init - forge.h (143, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_forge_init ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map);

	// function lv2_atom_forge_deref - forge.h (168, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_atom_forge_deref ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, LV2_Atom_Forge_Ref @ref);

	// function lv2_atom_forge_push - forge.h (189, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_push ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, LV2_Atom_Forge_Ref @ref);

	// function lv2_atom_forge_pop - forge.h (201, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_forge_pop ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame);

	// function lv2_atom_forge_top_is - forge.h (209, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_forge_top_is ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @type);

	// function lv2_atom_forge_is_object_type - forge.h (217, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_forge_is_object_type ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @type);

	// function lv2_atom_forge_is_blank - forge.h (226, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_atom_forge_is_blank ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @type, [CTypeDetails ("Pointer<LV2_Atom_Object_Body>")]System.IntPtr @body);

	// function lv2_atom_forge_set_buffer - forge.h (242, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_forge_set_buffer ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @buf, [CTypeDetails ("Pointer<void>")]System.IntPtr @size);

	// function lv2_atom_forge_set_sink - forge.h (268, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_forge_set_sink ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, LV2_Atom_Forge_Sink @sink, LV2_Atom_Forge_Deref_Func @deref, LV2_Atom_Forge_Sink_Handle @handle);

	// function lv2_atom_forge_raw - forge.h (293, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_raw ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<void>")]System.IntPtr @data, uint @size);

	// function lv2_atom_forge_pad - forge.h (315, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_atom_forge_pad ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @written);

	// function lv2_atom_forge_write - forge.h (324, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_write ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<void>")]System.IntPtr @data, uint @size);

	// function lv2_atom_forge_string_body - forge.h (335, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_string_body ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str, uint @len);

	// function lv2_atom_forge_atom - forge.h (354, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_atom ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @size, uint @type);

	// function lv2_atom_forge_primitive - forge.h (362, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_primitive ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom>")]System.IntPtr @a);

	// function lv2_atom_forge_int - forge.h (374, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_int ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, int @val);

	// function lv2_atom_forge_long - forge.h (382, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_long ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, long @val);

	// function lv2_atom_forge_float - forge.h (390, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_float ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, float @val);

	// function lv2_atom_forge_double - forge.h (398, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_double ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, double @val);

	// function lv2_atom_forge_bool - forge.h (406, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_bool ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, bool @val);

	// function lv2_atom_forge_urid - forge.h (414, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_urid ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @id);

	// function lv2_atom_forge_typed_string - forge.h (422, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_typed_string ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @type, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str, uint @len);

	// function lv2_atom_forge_string - forge.h (441, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_string ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str, uint @len);

	// function lv2_atom_forge_uri - forge.h (452, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_uri ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri, uint @len);

	// function lv2_atom_forge_path - forge.h (459, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_path ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<byte>")]System.IntPtr @path, uint @len);

	// function lv2_atom_forge_literal - forge.h (466, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_literal ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str, uint @len, uint @datatype, uint @lang);

	// function lv2_atom_forge_vector_head - forge.h (491, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_vector_head ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, uint @child_size, uint @child_type);

	// function lv2_atom_forge_vector - forge.h (506, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_vector ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @child_size, uint @child_type, uint @n_elems, [CTypeDetails ("Pointer<void>")]System.IntPtr @elems);

	// function lv2_atom_forge_tuple - forge.h (542, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_tuple ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame);

	// function lv2_atom_forge_object - forge.h (574, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_object ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, uint @id, uint @otype);

	// function lv2_atom_forge_resource - forge.h (595, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_resource ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, uint @id, uint @otype);

	// function lv2_atom_forge_blank - forge.h (616, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_blank ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, uint @id, uint @otype);

	// function lv2_atom_forge_key - forge.h (635, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_key ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @key);

	// function lv2_atom_forge_property_head - forge.h (649, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_property_head ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, uint @key, uint @context);

	// function lv2_atom_forge_sequence_head - forge.h (661, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_sequence_head ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, [CTypeDetails ("Pointer<LV2_Atom_Forge_Frame>")]System.IntPtr @frame, uint @unit);

	// function lv2_atom_forge_frame_time - forge.h (679, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_frame_time ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, long @frames);

	// function lv2_atom_forge_beat_time - forge.h (690, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Atom_Forge_Ref lv2_atom_forge_beat_time ([CTypeDetails ("Pointer<LV2_Atom_Forge>")]System.IntPtr @forge, double @beats);

	// function lv2_midi_is_voice_message - midi.h (194, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_midi_is_voice_message ([CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @msg);

	// function lv2_midi_is_system_message - midi.h (202, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_midi_is_system_message ([CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @msg);

	// function lv2_midi_message_type - midi.h (216, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Midi_Message_Type lv2_midi_message_type ([CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @msg);

	// function lv2_log_logger_set_map - logger.h (59, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_log_logger_set_map ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map);

	// function lv2_log_logger_init - logger.h (79, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_log_logger_init ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<LV2_Log_Log>")]System.IntPtr @log);

	// function lv2_log_error - logger.h (107, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_log_error ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<byte>")]System.IntPtr @fmt);

	// function lv2_log_note - logger.h (119, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_log_note ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<byte>")]System.IntPtr @fmt);

	// function lv2_log_trace - logger.h (131, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_log_trace ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<byte>")]System.IntPtr @fmt);

	// function lv2_log_warning - logger.h (143, 1)
	[DllImport (LibraryName)]
	internal static extern int lv2_log_warning ([CTypeDetails ("Pointer<LV2_Log_Logger>")]System.IntPtr @logger, [CTypeDetails ("Pointer<byte>")]System.IntPtr @fmt);

	// function lv2_event_pad_size - event-helpers.h (51, 1)
	[DllImport (LibraryName)]
	internal static extern ushort lv2_event_pad_size (ushort @size);

	// function lv2_event_buffer_reset - event-helpers.h (61, 1)
	[DllImport (LibraryName)]
	internal static extern void lv2_event_buffer_reset ([CTypeDetails ("Pointer<LV2_Event_Buffer>")]System.IntPtr @buf, ushort @stamp_type, [CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @data);

	// function lv2_event_buffer_new - event-helpers.h (75, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_event_buffer_new (uint @capacity, ushort @stamp_type);

	// function lv2_event_begin - event-helpers.h (102, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_event_begin ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter, [CTypeDetails ("Pointer<LV2_Event_Buffer>")]System.IntPtr @buf);

	// function lv2_event_is_valid - event-helpers.h (114, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_event_is_valid ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter);

	// function lv2_event_increment - event-helpers.h (124, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_event_increment ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter);

	// function lv2_event_get - event-helpers.h (148, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_event_get ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @data);

	// function lv2_event_write - event-helpers.h (171, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_event_write ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter, uint @frames, uint @subframes, ushort @type, ushort @size, [CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @data);

	// function lv2_event_reserve - event-helpers.h (206, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_event_reserve ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter, uint @frames, uint @subframes, ushort @type, ushort @size);

	// function lv2_event_write_event - event-helpers.h (239, 1)
	[DllImport (LibraryName)]
	internal static extern bool lv2_event_write_event ([CTypeDetails ("Pointer<LV2_Event_Iterator>")]System.IntPtr @iter, [CTypeDetails ("Pointer<LV2_Event>")]System.IntPtr @ev, [CTypeDetails ("Pointer<uint8_t>")]System.IntPtr @data);

	// function lv2ui_descriptor - ui.h (431, 25)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2ui_descriptor (uint @index);

}

internal class Delegates
{
public delegate LV2_Handle delegate0 (System.IntPtr p0, double p1, System.IntPtr p2, System.IntPtr p3);
public delegate void delegate1 (LV2_Handle p0, uint p1, System.IntPtr p2);
public delegate void delegate2 (LV2_Handle p0);
public delegate void delegate3 (LV2_Handle p0, uint p1);
public delegate System.IntPtr delegate4 (System.IntPtr p0);
public delegate System.IntPtr LV2_Descriptor_Function (System.UInt32 p0);
public delegate void delegate6 (LV2_Lib_Handle p0);
public delegate System.IntPtr delegate7 (LV2_Lib_Handle p0, uint p1);
public delegate System.IntPtr LV2_Lib_Descriptor_Function (System.IntPtr p0, System.IntPtr p1);
public delegate uint delegate9 (LV2_URID_Map_Handle p0, System.IntPtr p1);
public delegate System.IntPtr delegate10 (LV2_URID_Unmap_Handle p0, uint p1);
public delegate System.IntPtr LV2_Atom_Forge_Sink (System.IntPtr p0, System.IntPtr p1, System.UInt32 p2);
public delegate System.IntPtr LV2_Atom_Forge_Deref_Func (System.IntPtr p0, System.IntPtr p1);
public delegate Lv2Sharp.NativeInterop.LV2_Worker_Status LV2_Worker_Respond_Function (System.IntPtr p0, System.UInt32 p1, System.IntPtr p2);
public delegate LV2_Worker_Status delegate14 (LV2_Handle p0, LV2_Worker_Respond_Function p1, LV2_Worker_Respond_Handle p2, uint p3, System.IntPtr p4);
public delegate LV2_Worker_Status delegate15 (LV2_Handle p0, uint p1, System.IntPtr p2);
public delegate LV2_Worker_Status delegate16 (LV2_Handle p0);
public delegate LV2_Worker_Status delegate17 (LV2_Worker_Schedule_Handle p0, uint p1, System.IntPtr p2);
public delegate LV2_Resize_Port_Status delegate18 (LV2_Resize_Port_Feature_Data p0, uint p1, System.IntPtr p2);
public delegate int delegate19 (LV2_Log_Handle p0, uint p1, System.IntPtr p2);
public delegate Lv2Sharp.NativeInterop.LV2_State_Status LV2_State_Store_Function (System.IntPtr p0, System.UInt32 p1, System.IntPtr p2, System.IntPtr p3, System.UInt32 p4, System.UInt32 p5);
public delegate System.IntPtr LV2_State_Retrieve_Function (System.IntPtr p0, System.UInt32 p1, System.IntPtr p2, System.IntPtr p3, System.IntPtr p4);
public delegate LV2_State_Status delegate22 (LV2_Handle p0, LV2_State_Store_Function p1, LV2_State_Handle p2, uint p3, System.IntPtr p4);
public delegate LV2_State_Status delegate23 (LV2_Handle p0, LV2_State_Retrieve_Function p1, LV2_State_Handle p2, uint p3, System.IntPtr p4);
public delegate System.IntPtr delegate24 (LV2_State_Map_Path_Handle p0, System.IntPtr p1);
public delegate System.IntPtr delegate25 (LV2_State_Make_Path_Handle p0, System.IntPtr p1);
public delegate uint delegate26 (LV2_Handle p0, System.IntPtr p1);
public delegate uint delegate27 (LV2_Handle p0, System.IntPtr p1);
public delegate uint delegate28 (LV2_Event_Callback_Data p0, System.IntPtr p1);
public delegate uint delegate29 (LV2_URI_Map_Callback_Data p0, System.IntPtr p1, System.IntPtr p2);
public delegate void LV2UI_Write_Function (System.IntPtr p0, System.UInt32 p1, System.UInt32 p2, System.UInt32 p3, System.IntPtr p4);
public delegate LV2UI_Handle delegate31 (System.IntPtr p0, System.IntPtr p1, System.IntPtr p2, LV2UI_Write_Function p3, LV2UI_Controller p4, System.IntPtr p5, System.IntPtr p6);
public delegate void delegate32 (LV2UI_Handle p0);
public delegate void delegate33 (LV2UI_Handle p0, uint p1, uint p2, uint p3, System.IntPtr p4);
public delegate int delegate34 (LV2UI_Feature_Handle p0, int p1, int p2);
public delegate uint delegate35 (LV2UI_Feature_Handle p0, System.IntPtr p1);
public delegate uint delegate36 (LV2UI_Feature_Handle p0, uint p1, uint p2, System.IntPtr p3);
public delegate void delegate37 (LV2UI_Feature_Handle p0, uint p1, bool p2);
public delegate int delegate38 (LV2UI_Handle p0);
public delegate System.IntPtr LV2UI_DescriptorFunction (System.UInt32 p0);
}

internal struct Pointer<T>
{
	public IntPtr Handle;
	public static implicit operator IntPtr (Pointer<T> value) { return value.Handle; }
	public static implicit operator Pointer<T> (IntPtr value) { return new Pointer<T> (value); }

	public Pointer (IntPtr handle)
	{
		Handle = handle;
	}

	public override bool Equals (object obj)
	{
		return obj is Pointer<T> && this == (Pointer<T>) obj;
	}

	public override int GetHashCode ()
	{
		return (int) Handle;
	}

	public static bool operator == (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle == p2.Handle;
	}

	public static bool operator != (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle != p2.Handle;
	}
}
internal struct ArrayOf<T> {}
internal struct ConstArrayOf<T> {}
internal class CTypeDetailsAttribute : Attribute
{
	public CTypeDetailsAttribute (string value)
	{
		Value = value;
	}

	public string Value { get; set; }
}

}
