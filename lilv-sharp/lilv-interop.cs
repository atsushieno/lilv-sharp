// This source file is generated by nclang PInvokeGenerator.
using System;
using System.Runtime.InteropServices;
using time_t = System.IntPtr;
using size_t = System.IntPtr;
using LV2_Handle = System.IntPtr;
using delegate5 = LilvSharp.Delegates.LV2_Descriptor_Function; // lv2.h (394,3)
using LV2_Lib_Handle = System.IntPtr;
using delegate8 = LilvSharp.Delegates.LV2_Lib_Descriptor_Function; // lv2.h (463,3)
using LV2_URID_Map_Handle = System.IntPtr;
using LV2_URID_Unmap_Handle = System.IntPtr;
using delegate11 = LilvSharp.Delegates.LilvGetPortValueFunc; // lilv.h (1267,23)
using delegate12 = LilvSharp.Delegates.LilvSetPortValueFunc; // lilv.h (1425,16)
using delegate13 = LilvSharp.Delegates.LilvUISupportedFunc; // lilv.h (1798,20)
using delegate0 = LilvSharp.Delegates.delegate0;
using delegate1 = LilvSharp.Delegates.delegate1;
using delegate2 = LilvSharp.Delegates.delegate2;
using delegate3 = LilvSharp.Delegates.delegate3;
using delegate4 = LilvSharp.Delegates.delegate4;
using LV2_Descriptor_Function = LilvSharp.Delegates.LV2_Descriptor_Function;
using delegate6 = LilvSharp.Delegates.delegate6;
using delegate7 = LilvSharp.Delegates.delegate7;
using LV2_Lib_Descriptor_Function = LilvSharp.Delegates.LV2_Lib_Descriptor_Function;
using delegate9 = LilvSharp.Delegates.delegate9;
using delegate10 = LilvSharp.Delegates.delegate10;
using LilvGetPortValueFunc = LilvSharp.Delegates.LilvGetPortValueFunc;
using LilvSetPortValueFunc = LilvSharp.Delegates.LilvSetPortValueFunc;
using LilvUISupportedFunc = LilvSharp.Delegates.LilvUISupportedFunc;

namespace LilvSharp {
[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Feature // lv2.h (143, 16)
{
	[CTypeDetails ("Pointer<byte>")]internal System.IntPtr @URI;
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Descriptor // lv2.h (166, 16)
{
	[CTypeDetails ("Pointer<byte>")]internal System.IntPtr @URI;
	[CTypeDetails ("Pointer<LV2_Handle (const _LV2_Descriptor *, double, const char *, const LV2_Feature *const *)>")]internal Delegates.delegate0 @instantiate;
	[CTypeDetails ("Pointer<void (LV2_Handle, unsigned int, void *)>")]internal Delegates.delegate1 @connect_port;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @activate;
	[CTypeDetails ("Pointer<void (LV2_Handle, unsigned int)>")]internal Delegates.delegate3 @run;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @deactivate;
	[CTypeDetails ("Pointer<void (LV2_Handle)>")]internal Delegates.delegate2 @cleanup;
	[CTypeDetails ("Pointer<const void *(const char *)>")]internal Delegates.delegate4 @extension_data;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_Lib_Descriptor // lv2.h (407, 9)
{
	internal LV2_Lib_Handle @handle;
	internal uint @size;
	[CTypeDetails ("Pointer<void (LV2_Lib_Handle)>")]internal Delegates.delegate6 @cleanup;
	[CTypeDetails ("Pointer<const LV2_Descriptor *(LV2_Lib_Handle, unsigned int)>")]internal Delegates.delegate7 @get_plugin;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_URID_Map // urid.h (63, 16)
{
	internal LV2_URID_Map_Handle @handle;
	[CTypeDetails ("Pointer<unsigned int (LV2_URID_Map_Handle, const char *)>")]internal Delegates.delegate9 @map;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LV2_URID_Unmap // urid.h (100, 16)
{
	internal LV2_URID_Unmap_Handle @handle;
	[CTypeDetails ("Pointer<const char *(LV2_URID_Unmap_Handle, unsigned int)>")]internal Delegates.delegate10 @unmap;
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvPlugin // lilv.h (79, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvPluginClass // lilv.h (80, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvPort // lilv.h (81, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvScalePoint // lilv.h (82, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvUI // lilv.h (83, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvNode // lilv.h (84, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvWorld // lilv.h (85, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvState // lilv.h (87, 16)
{
}

[StructLayout (LayoutKind.Sequential)]
internal struct LilvInstance // lilv.h (1614, 8)
{
	[CTypeDetails ("Pointer<LV2_Descriptor>")]internal System.IntPtr @lv2_descriptor;
	internal LV2_Handle @lv2_handle;
	[CTypeDetails ("Pointer<void>")]internal System.IntPtr @pimpl;
}

internal partial class Natives
{
	const string LibraryName = "lilv-0";
	// function lv2_lib_descriptor - lv2.h (456, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lv2_lib_descriptor ([CTypeDetails ("Pointer<byte>")]System.IntPtr @bundle_path, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lilv_free - lilv.h (113, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_free ([CTypeDetails ("Pointer<void>")]System.IntPtr @ptr);

	// function lilv_uri_to_path - lilv.h (129, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_uri_to_path ([CTypeDetails ("Pointer<byte>")]System.IntPtr @uri);

	// function lilv_file_uri_parse - lilv.h (140, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_file_uri_parse ([CTypeDetails ("Pointer<byte>")]System.IntPtr @uri, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @hostname);

	// function lilv_new_uri - lilv.h (147, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_uri ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri);

	// function lilv_new_file_uri - lilv.h (160, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_file_uri ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<byte>")]System.IntPtr @host, [CTypeDetails ("Pointer<byte>")]System.IntPtr @path);

	// function lilv_new_string - lilv.h (167, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_string ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str);

	// function lilv_new_int - lilv.h (174, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_int ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, int @val);

	// function lilv_new_float - lilv.h (181, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_float ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, float @val);

	// function lilv_new_bool - lilv.h (188, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_new_bool ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, bool @val);

	// function lilv_node_free - lilv.h (195, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_node_free ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @val);

	// function lilv_node_duplicate - lilv.h (201, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_duplicate ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @val);

	// function lilv_node_equals - lilv.h (207, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_equals ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @other);

	// function lilv_node_get_turtle_token - lilv.h (223, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_get_turtle_token ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_uri - lilv.h (229, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_uri ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_uri - lilv.h (237, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_as_uri ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_blank - lilv.h (243, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_blank ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_blank - lilv.h (251, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_as_blank ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_literal - lilv.h (258, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_literal ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_string - lilv.h (265, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_string ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_string - lilv.h (271, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_as_string ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_get_path - lilv.h (279, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_node_get_path ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @hostname);

	// function lilv_node_is_float - lilv.h (285, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_float ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_float - lilv.h (293, 1)
	[DllImport (LibraryName)]
	internal static extern float lilv_node_as_float ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_int - lilv.h (299, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_int ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_int - lilv.h (306, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_node_as_int ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_is_bool - lilv.h (312, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_is_bool ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_node_as_bool - lilv.h (319, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_node_as_bool ([CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_plugin_classes_free - lilv.h (362, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_plugin_classes_free ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection);

	// function lilv_plugin_classes_size - lilv.h (365, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_plugin_classes_size ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection);

	// function lilv_plugin_classes_begin - lilv.h (368, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_classes_begin ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection);

	// function lilv_plugin_classes_get - lilv.h (371, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_classes_get ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugin_classes_next - lilv.h (374, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_classes_next ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugin_classes_is_end - lilv.h (377, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_classes_is_end ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugin_classes_get_by_uri - lilv.h (386, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_classes_get_by_uri ([CTypeDetails ("Pointer<LilvPluginClasses>")]System.IntPtr @classes, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @uri);

	// function lilv_scale_points_free - lilv.h (392, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_scale_points_free ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection);

	// function lilv_scale_points_size - lilv.h (395, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_scale_points_size ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection);

	// function lilv_scale_points_begin - lilv.h (398, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_scale_points_begin ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection);

	// function lilv_scale_points_get - lilv.h (401, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_scale_points_get ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_scale_points_next - lilv.h (404, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_scale_points_next ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_scale_points_is_end - lilv.h (407, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_scale_points_is_end ([CTypeDetails ("Pointer<LilvScalePoints>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_uis_free - lilv.h (412, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_uis_free ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection);

	// function lilv_uis_size - lilv.h (415, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_uis_size ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection);

	// function lilv_uis_begin - lilv.h (418, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_uis_begin ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection);

	// function lilv_uis_get - lilv.h (421, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_uis_get ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_uis_next - lilv.h (424, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_uis_next ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_uis_is_end - lilv.h (427, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_uis_is_end ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_uis_get_by_uri - lilv.h (436, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_uis_get_by_uri ([CTypeDetails ("Pointer<LilvUIs>")]System.IntPtr @uis, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @uri);

	// function lilv_nodes_free - lilv.h (442, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_nodes_free ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection);

	// function lilv_nodes_size - lilv.h (445, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_nodes_size ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection);

	// function lilv_nodes_begin - lilv.h (448, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_nodes_begin ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection);

	// function lilv_nodes_get - lilv.h (451, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_nodes_get ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_nodes_next - lilv.h (454, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_nodes_next ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_nodes_is_end - lilv.h (457, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_nodes_is_end ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_nodes_get_first - lilv.h (460, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_nodes_get_first ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @collection);

	// function lilv_nodes_contains - lilv.h (466, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_nodes_contains ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @values, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_nodes_merge - lilv.h (472, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_nodes_merge ([CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @a, [CTypeDetails ("Pointer<LilvNodes>")]System.IntPtr @b);

	// function lilv_plugins_size - lilv.h (477, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_plugins_size ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @collection);

	// function lilv_plugins_begin - lilv.h (480, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugins_begin ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @collection);

	// function lilv_plugins_get - lilv.h (483, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugins_get ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugins_next - lilv.h (486, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugins_next ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugins_is_end - lilv.h (489, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugins_is_end ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @collection, [CTypeDetails ("Pointer<LilvIter>")]System.IntPtr @i);

	// function lilv_plugins_get_by_uri - lilv.h (498, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugins_get_by_uri ([CTypeDetails ("Pointer<LilvPlugins>")]System.IntPtr @plugins, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @uri);

	// function lilv_world_new - lilv.h (516, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_new ();

	// function lilv_world_set_option - lilv.h (541, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_set_option ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @value);

	// function lilv_world_free - lilv.h (553, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_free ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_load_all - lilv.h (567, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_load_all ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_load_bundle - lilv.h (582, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_load_bundle ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @bundle_uri);

	// function lilv_world_load_specifications - lilv.h (593, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_load_specifications ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_load_plugin_classes - lilv.h (603, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_world_load_plugin_classes ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_unload_bundle - lilv.h (614, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_world_unload_bundle ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @bundle_uri);

	// function lilv_world_load_resource - lilv.h (626, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_world_load_resource ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @resource);

	// function lilv_world_unload_resource - lilv.h (638, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_world_unload_resource ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @resource);

	// function lilv_world_get_plugin_class - lilv.h (645, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_get_plugin_class ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_get_plugin_classes - lilv.h (652, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_get_plugin_classes ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_get_all_plugins - lilv.h (666, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_get_all_plugins ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world);

	// function lilv_world_find_nodes - lilv.h (674, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_find_nodes ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @object);

	// function lilv_world_get - lilv.h (688, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_get ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @object);

	// function lilv_world_ask - lilv.h (705, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_world_ask ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @object);

	// function lilv_world_get_symbol - lilv.h (718, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_world_get_symbol ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject);

	// function lilv_plugin_verify - lilv.h (737, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_verify ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_uri - lilv.h (754, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_uri ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_bundle_uri - lilv.h (769, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_bundle_uri ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_data_uris - lilv.h (780, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_data_uris ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_library_uri - lilv.h (789, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_library_uri ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_name - lilv.h (799, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_name ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_class - lilv.h (805, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_class ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_value - lilv.h (820, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_value ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate);

	// function lilv_plugin_has_feature - lilv.h (829, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_has_feature ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @feature_uri);

	// function lilv_plugin_get_supported_features - lilv.h (843, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_supported_features ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_required_features - lilv.h (857, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_required_features ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_optional_features - lilv.h (868, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_optional_features ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_has_extension_data - lilv.h (874, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_has_extension_data ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @uri);

	// function lilv_plugin_get_extension_data - lilv.h (883, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_extension_data ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_num_ports - lilv.h (889, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_plugin_get_num_ports ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_port_ranges_float - lilv.h (906, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_plugin_get_port_ranges_float ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<float>")]System.IntPtr @min_values, [CTypeDetails ("Pointer<float>")]System.IntPtr @max_values, [CTypeDetails ("Pointer<float>")]System.IntPtr @def_values);

	// function lilv_plugin_get_num_ports_of_class - lilv.h (918, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_plugin_get_num_ports_of_class ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @class_1);

	// function lilv_plugin_has_latency - lilv.h (939, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_has_latency ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_latency_port_index - lilv.h (951, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_plugin_get_latency_port_index ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p);

	// function lilv_plugin_get_port_by_index - lilv.h (957, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_port_by_index ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, uint @index);

	// function lilv_plugin_get_port_by_symbol - lilv.h (966, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_port_by_symbol ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @symbol);

	// function lilv_plugin_get_port_by_designation - lilv.h (980, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_port_by_designation ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @port_class, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @designation);

	// function lilv_plugin_get_project - lilv.h (991, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_project ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_author_name - lilv.h (999, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_author_name ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_author_email - lilv.h (1007, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_author_email ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_get_author_homepage - lilv.h (1015, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_author_homepage ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_is_replaced - lilv.h (1024, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_plugin_is_replaced ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_plugin_write_description - lilv.h (1033, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_plugin_write_description ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @base_uri, [CTypeDetails ("Pointer<FILE>")]System.IntPtr @plugin_file);

	// function lilv_plugin_write_manifest_entry - lilv.h (1045, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_plugin_write_manifest_entry ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @base_uri, [CTypeDetails ("Pointer<FILE>")]System.IntPtr @manifest_file, [CTypeDetails ("Pointer<byte>")]System.IntPtr @plugin_file_path);

	// function lilv_plugin_get_related - lilv.h (1065, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_related ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @type);

	// function lilv_port_get_node - lilv.h (1081, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_node ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_get_value - lilv.h (1088, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_value ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate);

	// function lilv_port_get - lilv.h (1100, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @predicate);

	// function lilv_port_get_properties - lilv.h (1108, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_properties ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_has_property - lilv.h (1115, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_port_has_property ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @property_uri);

	// function lilv_port_supports_event - lilv.h (1126, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_port_supports_event ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @p, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @event_type);

	// function lilv_port_get_index - lilv.h (1136, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_port_get_index ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_get_symbol - lilv.h (1145, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_symbol ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_get_name - lilv.h (1155, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_name ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_get_classes - lilv.h (1166, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_classes ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_port_is_a - lilv.h (1178, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_port_is_a ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @port_class);

	// function lilv_port_get_range - lilv.h (1191, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_port_get_range ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @deflt, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @min, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @max);

	// function lilv_port_get_scale_points - lilv.h (1205, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_port_get_scale_points ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvPort>")]System.IntPtr @port);

	// function lilv_state_new_from_world - lilv.h (1224, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_new_from_world ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject);

	// function lilv_state_new_from_file - lilv.h (1244, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_new_from_file ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @subject, [CTypeDetails ("Pointer<byte>")]System.IntPtr @path);

	// function lilv_state_new_from_string - lilv.h (1253, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_new_from_string ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<byte>")]System.IntPtr @str);

	// function lilv_state_new_from_instance - lilv.h (1338, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_new_from_instance ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, [CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<byte>")]System.IntPtr @file_dir, [CTypeDetails ("Pointer<byte>")]System.IntPtr @copy_dir, [CTypeDetails ("Pointer<byte>")]System.IntPtr @link_dir, [CTypeDetails ("Pointer<byte>")]System.IntPtr @save_dir, LilvGetPortValueFunc @get_value, [CTypeDetails ("Pointer<void>")]System.IntPtr @user_data, uint @flags, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lilv_state_free - lilv.h (1354, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_state_free ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_state_equals - lilv.h (1360, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_state_equals ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @a, [CTypeDetails ("Pointer<LilvState>")]System.IntPtr @b);

	// function lilv_state_get_num_properties - lilv.h (1366, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_state_get_num_properties ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_state_get_plugin_uri - lilv.h (1372, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_get_plugin_uri ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_state_get_uri - lilv.h (1380, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_get_uri ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_state_get_label - lilv.h (1386, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_get_label ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_state_set_label - lilv.h (1392, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_state_set_label ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, [CTypeDetails ("Pointer<byte>")]System.IntPtr @label);

	// function lilv_state_set_metadata - lilv.h (1410, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_state_set_metadata ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, uint @key, [CTypeDetails ("Pointer<void>")]System.IntPtr @value, size_t @size, uint @type, uint @flags);

	// function lilv_state_emit_port_values - lilv.h (1443, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_state_emit_port_values ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, LilvSetPortValueFunc @set_value, [CTypeDetails ("Pointer<void>")]System.IntPtr @user_data);

	// function lilv_state_restore - lilv.h (1471, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_state_restore ([CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, [CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance, LilvSetPortValueFunc @set_value, [CTypeDetails ("Pointer<void>")]System.IntPtr @user_data, uint @flags, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lilv_state_save - lilv.h (1496, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_state_save ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<LV2_URID_Unmap>")]System.IntPtr @unmap, [CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri, [CTypeDetails ("Pointer<byte>")]System.IntPtr @dir, [CTypeDetails ("Pointer<byte>")]System.IntPtr @filename);

	// function lilv_state_to_string - lilv.h (1517, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_state_to_string ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LV2_URID_Map>")]System.IntPtr @map, [CTypeDetails ("Pointer<LV2_URID_Unmap>")]System.IntPtr @unmap, [CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri, [CTypeDetails ("Pointer<byte>")]System.IntPtr @base_uri);

	// function lilv_state_delete - lilv.h (1539, 1)
	[DllImport (LibraryName)]
	internal static extern int lilv_state_delete ([CTypeDetails ("Pointer<LilvWorld>")]System.IntPtr @world, [CTypeDetails ("Pointer<LilvState>")]System.IntPtr @state);

	// function lilv_scale_point_get_label - lilv.h (1553, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_scale_point_get_label ([CTypeDetails ("Pointer<LilvScalePoint>")]System.IntPtr @point);

	// function lilv_scale_point_get_value - lilv.h (1560, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_scale_point_get_value ([CTypeDetails ("Pointer<LilvScalePoint>")]System.IntPtr @point);

	// function lilv_plugin_class_get_parent_uri - lilv.h (1574, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_class_get_parent_uri ([CTypeDetails ("Pointer<LilvPluginClass>")]System.IntPtr @plugin_class);

	// function lilv_plugin_class_get_uri - lilv.h (1581, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_class_get_uri ([CTypeDetails ("Pointer<LilvPluginClass>")]System.IntPtr @plugin_class);

	// function lilv_plugin_class_get_label - lilv.h (1588, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_class_get_label ([CTypeDetails ("Pointer<LilvPluginClass>")]System.IntPtr @plugin_class);

	// function lilv_plugin_class_get_children - lilv.h (1595, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_class_get_children ([CTypeDetails ("Pointer<LilvPluginClass>")]System.IntPtr @plugin_class);

	// function lilv_plugin_instantiate - lilv.h (1634, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_instantiate ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin, double @sample_rate, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @features);

	// function lilv_instance_free - lilv.h (1644, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_instance_free ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_instance_get_uri - lilv.h (1653, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_instance_get_uri ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_instance_connect_port - lilv.h (1664, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_instance_connect_port ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance, uint @port_index, [CTypeDetails ("Pointer<void>")]System.IntPtr @data_location);

	// function lilv_instance_activate - lilv.h (1679, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_instance_activate ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_instance_run - lilv.h (1691, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_instance_run ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance, uint @sample_count);

	// function lilv_instance_deactivate - lilv.h (1703, 1)
	[DllImport (LibraryName)]
	internal static extern void lilv_instance_deactivate ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_instance_get_extension_data - lilv.h (1715, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_instance_get_extension_data ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance, [CTypeDetails ("Pointer<byte>")]System.IntPtr @uri);

	// function lilv_instance_get_descriptor - lilv.h (1732, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_instance_get_descriptor ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_instance_get_handle - lilv.h (1745, 1)
	[DllImport (LibraryName)]
	internal static extern LV2_Handle lilv_instance_get_handle ([CTypeDetails ("Pointer<LilvInstance>")]System.IntPtr @instance);

	// function lilv_plugin_get_uis - lilv.h (1763, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_plugin_get_uis ([CTypeDetails ("Pointer<LilvPlugin>")]System.IntPtr @plugin);

	// function lilv_ui_get_uri - lilv.h (1771, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_ui_get_uri ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui);

	// function lilv_ui_get_classes - lilv.h (1782, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_ui_get_classes ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui);

	// function lilv_ui_is_a - lilv.h (1790, 1)
	[DllImport (LibraryName)]
	internal static extern bool lilv_ui_is_a ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @class_uri);

	// function lilv_ui_is_supported - lilv.h (1811, 1)
	[DllImport (LibraryName)]
	internal static extern uint lilv_ui_is_supported ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui, LilvUISupportedFunc @supported_func, [CTypeDetails ("Pointer<LilvNode>")]System.IntPtr @container_type, [CTypeDetails ("Pointer<System.IntPtr>")]System.IntPtr @ui_type);

	// function lilv_ui_get_bundle_uri - lilv.h (1822, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_ui_get_bundle_uri ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui);

	// function lilv_ui_get_binary_uri - lilv.h (1830, 1)
	[DllImport (LibraryName)]
	internal static extern System.IntPtr lilv_ui_get_binary_uri ([CTypeDetails ("Pointer<LilvUI>")]System.IntPtr @ui);

}

internal class Delegates
{
public delegate LV2_Handle delegate0 (System.IntPtr p0, double p1, System.IntPtr p2, System.IntPtr p3);
public delegate void delegate1 (LV2_Handle p0, uint p1, System.IntPtr p2);
public delegate void delegate2 (LV2_Handle p0);
public delegate void delegate3 (LV2_Handle p0, uint p1);
public delegate System.IntPtr delegate4 (System.IntPtr p0);
public delegate System.IntPtr LV2_Descriptor_Function (System.UInt32 p0);
public delegate void delegate6 (LV2_Lib_Handle p0);
public delegate System.IntPtr delegate7 (LV2_Lib_Handle p0, uint p1);
public delegate System.IntPtr LV2_Lib_Descriptor_Function (System.IntPtr p0, System.IntPtr p1);
public delegate uint delegate9 (LV2_URID_Map_Handle p0, System.IntPtr p1);
public delegate System.IntPtr delegate10 (LV2_URID_Unmap_Handle p0, uint p1);
public delegate System.IntPtr LilvGetPortValueFunc (System.IntPtr p0, System.IntPtr p1, System.IntPtr p2, System.IntPtr p3);
public delegate void LilvSetPortValueFunc (System.IntPtr p0, System.IntPtr p1, System.IntPtr p2, System.UInt32 p3, System.UInt32 p4);
public delegate System.UInt32 LilvUISupportedFunc (System.IntPtr p0, System.IntPtr p1);
}

internal struct Pointer<T>
{
	public IntPtr Handle;
	public static implicit operator IntPtr (Pointer<T> value) { return value.Handle; }
	public static implicit operator Pointer<T> (IntPtr value) { return new Pointer<T> (value); }

	public Pointer (IntPtr handle)
	{
		Handle = handle;
	}

	public override bool Equals (object obj)
	{
		return obj is Pointer<T> && this == (Pointer<T>) obj;
	}

	public override int GetHashCode ()
	{
		return (int) Handle;
	}

	public static bool operator == (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle == p2.Handle;
	}

	public static bool operator != (Pointer<T> p1, Pointer<T> p2)
	{
		return p1.Handle != p2.Handle;
	}
}
internal struct ArrayOf<T> {}
internal struct ConstArrayOf<T> {}
internal class CTypeDetailsAttribute : Attribute
{
	public CTypeDetailsAttribute (string value)
	{
		Value = value;
	}

	public string Value { get; set; }
}

}
